
import static es.gob.jmulticard.asn1.bertlv.a.a;
import es.gob.jmulticard.jse.provider.DnieProvider;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.Provider;
import java.security.PublicKey;
import java.security.Security;
import java.security.Signature;
import java.security.SignatureException;
import java.security.UnrecoverableEntryException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Juan Carlos
 */
public class AutenticaClient extends javax.swing.JFrame {
    public static User user = new User();

    /**
     * Creates new form NewJFrame
     */
    public AutenticaClient() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonAutentica = new javax.swing.JButton();
        jLabelName = new javax.swing.JLabel();
        jName = new javax.swing.JLabel();
        jButtonGrabar = new javax.swing.JButton();
        jLabel_apellidos = new javax.swing.JLabel();
        jLabel_dni = new javax.swing.JLabel();
        jApellidos = new javax.swing.JLabel();
        jDNI = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Bundle"); // NOI18N
        setTitle(bundle.getString("app_title")); // NOI18N

        jButtonAutentica.setText(bundle.getString("main_button_autenticate")); // NOI18N
        jButtonAutentica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAutenticaActionPerformed(evt);
            }
        });

        jLabelName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelName.setText("Nombre:");

        jName.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jName.setText("nombre");

        jButtonGrabar.setText("Graba certificado");
        jButtonGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGrabarActionPerformed(evt);
            }
        });

        jLabel_apellidos.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel_apellidos.setText("Apellidos:");

        jLabel_dni.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel_dni.setText("DNI:");

        jApellidos.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jApellidos.setText("apellidos");

        jDNI.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jDNI.setText("dni");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonGrabar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonAutentica))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel_apellidos)
                                    .addComponent(jLabel_dni))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jDNI)
                                    .addComponent(jApellidos))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jName)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelName)
                    .addComponent(jName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_apellidos)
                    .addComponent(jApellidos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel_dni)
                    .addComponent(jDNI))
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAutentica)
                    .addComponent(jButtonGrabar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAutenticaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAutenticaActionPerformed
        try {
            iniKeyStore();
            try {
                doAuth();
            } catch (UnrecoverableKeyException ex) {
                Logger.getLogger(AutenticaClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(AutenticaClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SignatureException ex) {
                Logger.getLogger(AutenticaClient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeySpecException ex) {
                Logger.getLogger(AutenticaClient.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (SignatureError ex) {
            Logger.getLogger(AutenticaClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (KeyStoreException ex) {
            Logger.getLogger(AutenticaClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AutenticaClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(AutenticaClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (CertificateException ex) {
            Logger.getLogger(AutenticaClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnrecoverableEntryException ex) {
            Logger.getLogger(AutenticaClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(AutenticaClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonAutenticaActionPerformed

    private void jButtonGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGrabarActionPerformed
      saveCertificate();
    }//GEN-LAST:event_jButtonGrabarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException, NoSuchAlgorithmException, CertificateException, UnrecoverableEntryException {
        String dn = "";
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AutenticaClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AutenticaClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AutenticaClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AutenticaClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        try {
            System.setProperty("es.gob.jmulticard.fastmode", "true");
           
         iniKeyStore();
         
            final Enumeration<String> aliases = dniKS.aliases();
            while (aliases.hasMoreElements()) {
                System.out.println(aliases.nextElement());
            }
            user = new User(authCert.toString());
       
            infoBox("Hola " + user.getName()," Bienvenido");

        } catch (KeyStoreException ex) {
            Logger.getLogger(AutenticaClient.class.getName()).log(Level.SEVERE, null, ex);
            dniKS = null;
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AutenticaClient().setVisible(true);
                jName.setText(user.getName());
                jApellidos.setText(user.getApellidos());
                jDNI.setText(user.getDni());
            }
        });

    }
    public final static String[] resultados = {"OK","Error"};
    public final static String[] mensajes = {"Autenticación Correcta.","Error en la autenticación, usuario inválido.",
                                            "Error de conexión.", "Error en la url."};
    public static String alias = "CertFirmaDigital";
    private static Provider dniProvider = null;
    private static KeyStore dniKS = null;
    private static X509Certificate authCert = null;
    private static  String url = "10.82.51.253:8081";
    private static RSAPublicKey rsa = null;
    /**
     * @param args the command line arguments
     */
    public static void infoBox(String infoMessage, String titleBar) {
        JOptionPane.showMessageDialog(null, infoMessage, titleBar, JOptionPane.INFORMATION_MESSAGE);
    }

    private static void iniKeyStore() throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException, UnrecoverableEntryException {
        if (dniKS == null) {
           //TODO inicializar el KeyStore
          dniProvider = new DnieProvider();
          Security.addProvider(dniProvider);
          dniKS = KeyStore.getInstance("DNI"); //$NON-NLS-1$ 
          dniKS.load(null, null);
          authCert = (X509Certificate) dniKS.getCertificate("CertAutenticacion");
         
          
        }
        
        
    }

    public void saveCertificate() {
        try {

            // Se obtiene el motor de firma y se inicializa
           FileOutputStream keyfos = new FileOutputStream("public.key");
            
            byte encodedKey[] = rsa.getEncoded(); 

            String rsakey = rsa.getFormat() + " " + rsa.getAlgorithm() + rsa.toString();
            System.out.println(rsakey);
            keyfos.write(encodedKey);
            keyfos.close();
            System.out.println("Grabado");
       } catch (IOException ex) {
            Logger.getLogger(AutenticaClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Devuelve los datos de entrada firmados en Base64
     *
     * @param data Datos a firmar
     * @return
     */
    private String doAuth() throws SignatureError, NoSuchAlgorithmException, KeyStoreException, UnrecoverableKeyException, InvalidKeyException, MalformedURLException, SignatureException, IOException, InvalidKeySpecException {
        final Signature signature = Signature.getInstance("SHA1withRSA"); 
        signature.initSign((PrivateKey) dniKS.getKey(alias, null));
        rsa = (RSAPublicKey) dniKS.getCertificate(alias).getPublicKey();
        System.out.println(rsa);
        String [] datos = user.firma(url);
        signature.update(datos[1].getBytes()); //$NON-NLS-1$
        final byte[] signatureBytes = signature.sign();
        byte[] encoded = Base64.getEncoder().encode(signatureBytes);
        byte[] rsaencoded = Base64.getEncoder().encode(rsa.getEncoded());
        System.out.println("encoded:"+new String(encoded));
        System.out.println("rsaencoded:"+new String(rsaencoded));
        String enviar=datos[0] +"&key="+URLEncoder.encode(new String(rsaencoded), "UTF-8")+"&firm="+URLEncoder.encode(new String(encoded), "UTF-8");
        System.out.println(enviar);
       peticion(enviar);
       //String datosfirm = URLDecoder.decode(new String(URLEncoder.encode(new String(encoded), "UTF-8")), "UTF-8");
       //String clave = URLDecoder.decode(new String(URLEncoder.encode(new String(rsa.getEncoded()), "UTF-8")),"UTF-8");
      // byte []decodef= Base64.getDecoder().decode(datosfirm); 
       //System.out.println(new String(decodef));
       
       String enc= URLEncoder.encode(new String(encoded), "UTF-8");
       String dec = URLDecoder.decode(enc, "UTF-8");
       byte[] dec6 = Base64.getDecoder().decode(dec);
       System.out.println(new String(dec6));
       signature.initVerify(rsa);//signature.initVerify(a);
       signature.update(datos[1].getBytes());//decoded.getBytes()
       System.out.println(signature.verify(signatureBytes));
		
			
		
       
        return signatureBytes.toString();
    }

    public class SignatureError extends Exception {

        private SignatureError(String message) {
            super(message);
        }

    }
    public static String peticion(String aenviar) throws MalformedURLException, ProtocolException, IOException{
        String inputline= "";
        String [] salida = null;
        
        
        byte[] datos = aenviar.getBytes( StandardCharsets.UTF_8 );
        int longitud = datos.length;
        
        //Cadena con la URL
        String direccion = "http://"+url+"/server/validar";
        System.out.println(direccion);
        try{
            //Monto la URL
            URL url = new URL(direccion);
            
            try{
                //Establezco conexión y parámetros
                HttpURLConnection conn= (HttpURLConnection) url.openConnection();         
                
                conn.setDoOutput(true);
                conn.setConnectTimeout(2000);//Tiempo de intento de conexión al servidor
                conn.setInstanceFollowRedirects( false );
                conn.setRequestMethod("POST");//Método POST
                conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded"); 
                conn.setRequestProperty("charset", "utf-8");
                conn.setRequestProperty("Content-Length", Integer.toString(longitud));
                conn.setUseCaches(false);
                
                //Escribe en la conexión
                try( DataOutputStream wr = new DataOutputStream( conn.getOutputStream())) {
                    wr.write(datos);
                }
                
                //Métodos de lectura
               Reader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), "UTF-8"));
                BufferedReader in = new BufferedReader(br);
                
                //Mientras lea líneas
                while ((inputline = in.readLine()) != null) {
                    //Si la línea empieza por Resultado=
                    if(inputline.startsWith("Resultado=")){
                        //Separo las palabras por el =
                        salida = inputline.split("=");
                    }
                }
                //Devuelvo la cadena que había detrás del =
                return salida[1];
            
            //Si no puedo leer o escribir
            }catch(IOException e){
                //Error de conexión
                return mensajes[2];
            }
        
        //Si la URL no está bien montada
        }catch(MalformedURLException u){
            //Error de URL
            return mensajes[3];
        }
        
    }   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JLabel jApellidos;
    private javax.swing.JButton jButtonAutentica;
    private static javax.swing.JButton jButtonGrabar;
    private static javax.swing.JLabel jDNI;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabel_apellidos;
    private javax.swing.JLabel jLabel_dni;
    private static javax.swing.JLabel jName;
    // End of variables declaration//GEN-END:variables
}
